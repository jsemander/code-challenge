import { assert, expect } from 'chai';
import 'mocha';
import * as moment from 'moment';
import PaydateCalculator from '../src/PaydateCalculator';

describe('PaydateCalculator', () => {
    describe('#calculateDueDate', () => {
        it('should calculate due date with weekly pay span, pay date on thursday, no direct deposit, and no holidays', () => {
            const paydate = new PaydateCalculator();
            const fundDate = moment().startOf('day').unix();
            const payDate = moment().startOf('day').isoWeekday(4).unix();
            const paySpan = 'weekly';
            const directDeposit = false;
            const holidayArray: number[] = [];
            const dueDate = paydate.calculateDueDate(fundDate, holidayArray, paySpan, payDate, directDeposit);
            expect(dueDate).to.be.gte(moment.unix(fundDate).add({ day: 10 }).unix());
            expect(holidayArray).to.not.include(dueDate);
            expect(moment.unix(dueDate).day() % 6 === 0).to.not.true;
        });
        it('should calculate due date with weekly pay span, pay date on thursday, no direct deposit, and holidays', () => {
            const paydate = new PaydateCalculator();
            const fundDate = moment().startOf('day').unix();
            const payDate = moment().startOf('day').isoWeekday(4).unix();
            const paySpan = 'weekly';
            const directDeposit = false;
            const holidayArray = [moment.unix(payDate).startOf('day').add({ day: 1, week: 1 }).unix()];
            const dueDate = paydate.calculateDueDate(fundDate, holidayArray, paySpan, payDate, directDeposit);
            expect(dueDate).to.be.gte(moment.unix(fundDate).add({ day: 10 }).unix());
            expect(holidayArray).to.not.include(dueDate);
            expect(moment.unix(dueDate).day() % 6 === 0).to.not.true;
        });
        it('should calculate due date with weekly pay span, pay date on friday, no direct deposit, and no holidays', () => {
            const paydate = new PaydateCalculator();
            const fundDate = moment().startOf('day').unix();
            const payDate = moment().startOf('day').isoWeekday(5).unix();
            const paySpan = 'weekly';
            const directDeposit = false;
            const holidayArray: number[] = [];
            const dueDate = paydate.calculateDueDate(fundDate, holidayArray, paySpan, payDate, directDeposit);
            expect(dueDate).to.be.gte(moment.unix(fundDate).add({ day: 10 }).unix());
            expect(holidayArray).to.not.include(dueDate);
            expect(moment.unix(dueDate).day() % 6 === 0).to.not.true;
        });
        it('should calculate due date with weekly pay span, pay date on friday, no direct deposit, and holidays', () => {
            const paydate = new PaydateCalculator();
            const fundDate = moment().startOf('day').unix();
            const payDate = moment().startOf('day').isoWeekday(5).unix();
            const paySpan = 'weekly';
            const directDeposit = false;
            const holidayArray = [moment.unix(payDate).startOf('day').add({ day: 1, week: 1 }).unix()];
            const dueDate = paydate.calculateDueDate(fundDate, holidayArray, paySpan, payDate, directDeposit);
            expect(dueDate).to.be.gte(moment.unix(fundDate).add({ day: 10 }).unix());
            expect(holidayArray).to.not.include(dueDate);
            expect(moment.unix(dueDate).day() % 6 === 0).to.not.true;
        });
        it('should calculate due date with weekly pay span, pay date on thursday, direct deposit, and no holidays', () => {
            const paydate = new PaydateCalculator();
            const fundDate = moment().startOf('day').unix();
            const payDate = moment().startOf('day').isoWeekday(4).unix();
            const paySpan = 'weekly';
            const directDeposit = true;
            const holidayArray: number[] = [];
            const dueDate = paydate.calculateDueDate(fundDate, holidayArray, paySpan, payDate, directDeposit);
            expect(dueDate).to.be.gte(moment.unix(fundDate).add({ day: 10 }).unix());
            expect(holidayArray).to.not.include(dueDate);
            expect(moment.unix(dueDate).day() % 6 === 0).to.not.true;
        });
        it('should calculate due date with weekly pay span, pay date on thursday, direct deposit, and holidays', () => {
            const paydate = new PaydateCalculator();
            const fundDate = moment().startOf('day').unix();
            const payDate = moment().startOf('day').isoWeekday(4).unix();
            const paySpan = 'weekly';
            const directDeposit = true;
            const holidayArray = [moment.unix(payDate).startOf('day').add({ week: 1 }).unix()];
            const dueDate = paydate.calculateDueDate(fundDate, holidayArray, paySpan, payDate, directDeposit);
            expect(dueDate).to.be.gte(moment.unix(fundDate).add({ day: 10 }).unix());
            expect(holidayArray).to.not.include(dueDate);
            expect(moment.unix(dueDate).day() % 6 === 0).to.not.true;
        });
        it('should calculate due date with weekly pay span, pay date on friday, direct deposit, and no holidays', () => {
            const paydate = new PaydateCalculator();
            const fundDate = moment().startOf('day').unix();
            const payDate = moment().startOf('day').isoWeekday(5).unix();
            const paySpan = 'weekly';
            const directDeposit = true;
            const holidayArray: number[] = [];
            const dueDate = paydate.calculateDueDate(fundDate, holidayArray, paySpan, payDate, directDeposit);
            expect(dueDate).to.be.gte(moment.unix(fundDate).add({ day: 10 }).unix());
            expect(holidayArray).to.not.include(dueDate);
            expect(moment.unix(dueDate).day() % 6 === 0).to.not.true;
        });
        it('should calculate due date with weekly pay span, pay date on friday, direct deposit, and holidays', () => {
            const paydate = new PaydateCalculator();
            const fundDate = moment().startOf('day').unix();
            const payDate = moment().startOf('day').isoWeekday(5).unix();
            const paySpan = 'weekly';
            const directDeposit = true;
            const holidayArray = [moment.unix(payDate).startOf('day').add({ week: 1 }).unix()];
            const dueDate = paydate.calculateDueDate(fundDate, holidayArray, paySpan, payDate, directDeposit);
            expect(dueDate).to.be.gte(moment.unix(fundDate).add({ day: 10 }).unix());
            expect(holidayArray).to.not.include(dueDate);
            expect(moment.unix(dueDate).day() % 6 === 0).to.not.true;
        });
        it('should calculate due date with bi-weekly pay span, pay date on thursday, no direct deposit, and no holidays', () => {
            const paydate = new PaydateCalculator();
            const fundDate = moment().startOf('day').unix();
            const payDate = moment().startOf('day').isoWeekday(4).unix();
            const paySpan = 'bi-weekly';
            const directDeposit = false;
            const holidayArray: number[] = [];
            const dueDate = paydate.calculateDueDate(fundDate, holidayArray, paySpan, payDate, directDeposit);
            expect(dueDate).to.be.gte(moment.unix(fundDate).add({ day: 10 }).unix());
            expect(holidayArray).to.not.include(dueDate);
            expect(moment.unix(dueDate).day() % 6 === 0).to.not.true;
        });
        it('should calculate due date with bi-weekly pay span, pay date on thursday, no direct deposit, and holidays', () => {
            const paydate = new PaydateCalculator();
            const fundDate = moment().startOf('day').unix();
            const payDate = moment().startOf('day').isoWeekday(4).unix();
            const paySpan = 'bi-weekly';
            const directDeposit = false;
            const holidayArray = [moment.unix(payDate).startOf('day').add({ day: 1, week: 2 }).unix()];
            const dueDate = paydate.calculateDueDate(fundDate, holidayArray, paySpan, payDate, directDeposit);
            expect(dueDate).to.be.gte(moment.unix(fundDate).add({ day: 10 }).unix());
            expect(holidayArray).to.not.include(dueDate);
            expect(moment.unix(dueDate).day() % 6 === 0).to.not.true;
        });
        it('should calculate due date with bi-weekly pay span, pay date on friday, no direct deposit, and no holidays', () => {
            const paydate = new PaydateCalculator();
            const fundDate = moment().startOf('day').unix();
            const payDate = moment().startOf('day').isoWeekday(5).unix();
            const paySpan = 'bi-weekly';
            const directDeposit = false;
            const holidayArray: number[] = [];
            const dueDate = paydate.calculateDueDate(fundDate, holidayArray, paySpan, payDate, directDeposit);
            expect(dueDate).to.be.gte(moment.unix(fundDate).add({ day: 10 }).unix());
            expect(holidayArray).to.not.include(dueDate);
            expect(moment.unix(dueDate).day() % 6 === 0).to.not.true;
        });
        it('should calculate due date with bi-weekly pay span, pay date on friday, no direct deposit, and holidays', () => {
            const paydate = new PaydateCalculator();
            const fundDate = moment().startOf('day').unix();
            const payDate = moment().startOf('day').isoWeekday(5).unix();
            const paySpan = 'bi-weekly';
            const directDeposit = false;
            const holidayArray = [moment.unix(payDate).startOf('day').add({ day: 1, week: 2 }).unix()];
            const dueDate = paydate.calculateDueDate(fundDate, holidayArray, paySpan, payDate, directDeposit);
            expect(dueDate).to.be.gte(moment.unix(fundDate).add({ day: 10 }).unix());
            expect(holidayArray).to.not.include(dueDate);
            expect(moment.unix(dueDate).day() % 6 === 0).to.not.true;
        });
        it('should calculate due date with bi-weekly pay span, pay date on thursday, direct deposit, and no holidays', () => {
            const paydate = new PaydateCalculator();
            const fundDate = moment().startOf('day').unix();
            const payDate = moment().startOf('day').isoWeekday(4).unix();
            const paySpan = 'bi-weekly';
            const directDeposit = true;
            const holidayArray: number[] = [];
            const dueDate = paydate.calculateDueDate(fundDate, holidayArray, paySpan, payDate, directDeposit);
            expect(dueDate).to.be.gte(moment.unix(fundDate).add({ day: 10 }).unix());
            expect(holidayArray).to.not.include(dueDate);
            expect(moment.unix(dueDate).day() % 6 === 0).to.not.true;
        });
        it('should calculate due date with bi-weekly pay span, pay date on thursday, direct deposit, and holidays', () => {
            const paydate = new PaydateCalculator();
            const fundDate = moment().startOf('day').unix();
            const payDate = moment().startOf('day').isoWeekday(4).unix();
            const paySpan = 'bi-weekly';
            const directDeposit = true;
            const holidayArray = [moment.unix(payDate).startOf('day').add({ week: 2 }).unix()];
            const dueDate = paydate.calculateDueDate(fundDate, holidayArray, paySpan, payDate, directDeposit);
            expect(dueDate).to.be.gte(moment.unix(fundDate).add({ day: 10 }).unix());
            expect(holidayArray).to.not.include(dueDate);
            expect(moment.unix(dueDate).day() % 6 === 0).to.not.true;
        });
        it('should calculate due date with bi-weekly pay span, pay date on friday, direct deposit, and no holidays', () => {
            const paydate = new PaydateCalculator();
            const fundDate = moment().startOf('day').unix();
            const payDate = moment().startOf('day').isoWeekday(5).unix();
            const paySpan = 'bi-weekly';
            const directDeposit = true;
            const holidayArray: number[] = [];
            const dueDate = paydate.calculateDueDate(fundDate, holidayArray, paySpan, payDate, directDeposit);
            expect(dueDate).to.be.gte(moment.unix(fundDate).add({ day: 10 }).unix());
            expect(holidayArray).to.not.include(dueDate);
            expect(moment.unix(dueDate).day() % 6 === 0).to.not.true;
        });
        it('should calculate due date with bi-weekly pay span, pay date on friday, direct deposit, and holidays', () => {
            const paydate = new PaydateCalculator();
            const fundDate = moment().startOf('day').unix();
            const payDate = moment().startOf('day').isoWeekday(5).unix();
            const paySpan = 'bi-weekly';
            const directDeposit = true;
            const holidayArray = [moment.unix(payDate).startOf('day').add({ week: 2 }).unix()];
            const dueDate = paydate.calculateDueDate(fundDate, holidayArray, paySpan, payDate, directDeposit);
            expect(dueDate).to.be.gte(moment.unix(fundDate).add({ day: 10 }).unix());
            expect(holidayArray).to.not.include(dueDate);
            expect(moment.unix(dueDate).day() % 6 === 0).to.not.true;
        });
        it('should calculate due date with monthly pay span, pay date on thursday, no direct deposit, and no holidays', () => {
            const paydate = new PaydateCalculator();
            const fundDate = moment().startOf('day').unix();
            const payDate = moment().startOf('day').isoWeekday(4).unix();
            const paySpan = 'monthly';
            const directDeposit = false;
            const holidayArray: number[] = [];
            const dueDate = paydate.calculateDueDate(fundDate, holidayArray, paySpan, payDate, directDeposit);
            expect(dueDate).to.be.gte(moment.unix(fundDate).add({ day: 10 }).unix());
            expect(holidayArray).to.not.include(dueDate);
            expect(moment.unix(dueDate).day() % 6 === 0).to.not.true;
        });
        it('should calculate due date with monthly pay span, pay date on thursday, no direct deposit, and holidays', () => {
            const paydate = new PaydateCalculator();
            const fundDate = moment().startOf('day').unix();
            const payDate = moment().startOf('day').isoWeekday(4).unix();
            const paySpan = 'monthly';
            const directDeposit = false;
            const holidayArray = [moment.unix(payDate).startOf('day').add({ day: 1, month: 1 }).unix()];
            const dueDate = paydate.calculateDueDate(fundDate, holidayArray, paySpan, payDate, directDeposit);
            expect(dueDate).to.be.gte(moment.unix(fundDate).add({ day: 10 }).unix());
            expect(holidayArray).to.not.include(dueDate);
            expect(moment.unix(dueDate).day() % 6 === 0).to.not.true;
        });
        it('should calculate due date with monthly pay span, pay date on friday, no direct deposit, and no holidays', () => {
            const paydate = new PaydateCalculator();
            const fundDate = moment().startOf('day').unix();
            const payDate = moment().startOf('day').isoWeekday(5).unix();
            const paySpan = 'monthly';
            const directDeposit = false;
            const holidayArray: number[] = [];
            const dueDate = paydate.calculateDueDate(fundDate, holidayArray, paySpan, payDate, directDeposit);
            expect(dueDate).to.be.gte(moment.unix(fundDate).add({ day: 10 }).unix());
            expect(holidayArray).to.not.include(dueDate);
            expect(moment.unix(dueDate).day() % 6 === 0).to.not.true;
        });
        it('should calculate due date with monthly pay span, pay date on friday, no direct deposit, and holidays', () => {
            const paydate = new PaydateCalculator();
            const fundDate = moment().startOf('day').unix();
            const payDate = moment().startOf('day').isoWeekday(5).unix();
            const paySpan = 'monthly';
            const directDeposit = false;
            const holidayArray = [moment.unix(payDate).startOf('day').add({ day: 1, month: 1 }).unix()];
            const dueDate = paydate.calculateDueDate(fundDate, holidayArray, paySpan, payDate, directDeposit);
            expect(dueDate).to.be.gte(moment.unix(fundDate).add({ day: 10 }).unix());
            expect(holidayArray).to.not.include(dueDate);
            expect(moment.unix(dueDate).day() % 6 === 0).to.not.true;
        });
        it('should calculate due date with monthly pay span, pay date on thursday, direct deposit, and no holidays', () => {
            const paydate = new PaydateCalculator();
            const fundDate = moment().startOf('day').unix();
            const payDate = moment().startOf('day').isoWeekday(4).unix();
            const paySpan = 'monthly';
            const directDeposit = true;
            const holidayArray: number[] = [];
            const dueDate = paydate.calculateDueDate(fundDate, holidayArray, paySpan, payDate, directDeposit);
            expect(dueDate).to.be.gte(moment.unix(fundDate).add({ day: 10 }).unix());
            expect(holidayArray).to.not.include(dueDate);
            expect(moment.unix(dueDate).day() % 6 === 0).to.not.true;
        });
        it('should calculate due date with monthly pay span, pay date on thursday, direct deposit, and holidays', () => {
            const paydate = new PaydateCalculator();
            const fundDate = moment().startOf('day').unix();
            const payDate = moment().startOf('day').isoWeekday(4).unix();
            const paySpan = 'monthly';
            const directDeposit = true;
            const holidayArray = [moment.unix(payDate).startOf('day').add({ month: 1 }).unix()];
            const dueDate = paydate.calculateDueDate(fundDate, holidayArray, paySpan, payDate, directDeposit);
            expect(dueDate).to.be.gte(moment.unix(fundDate).add({ day: 10 }).unix());
            expect(holidayArray).to.not.include(dueDate);
            expect(moment.unix(dueDate).day() % 6 === 0).to.not.true;
        });
        it('should calculate due date with monthly pay span, pay date on friday, direct deposit, and no holidays', () => {
            const paydate = new PaydateCalculator();
            const fundDate = moment().startOf('day').unix();
            const payDate = moment().startOf('day').isoWeekday(5).unix();
            const paySpan = 'monthly';
            const directDeposit = true;
            const holidayArray: number[] = [];
            const dueDate = paydate.calculateDueDate(fundDate, holidayArray, paySpan, payDate, directDeposit);
            expect(dueDate).to.be.gte(moment.unix(fundDate).add({ day: 10 }).unix());
            expect(holidayArray).to.not.include(dueDate);
            expect(moment.unix(dueDate).day() % 6 === 0).to.not.true;
        });
        it('should calculate due date with monthly pay span, pay date on friday, direct deposit, and holidays', () => {
            const paydate = new PaydateCalculator();
            const fundDate = moment().startOf('day').unix();
            const payDate = moment().startOf('day').isoWeekday(5).unix();
            const paySpan = 'monthly';
            const directDeposit = true;
            const holidayArray = [moment.unix(payDate).startOf('day').add({ month: 1 }).unix()];
            const dueDate = paydate.calculateDueDate(fundDate, holidayArray, paySpan, payDate, directDeposit);
            expect(dueDate).to.be.gte(moment.unix(fundDate).add({ day: 10 }).unix());
            expect(holidayArray).to.not.include(dueDate);
            expect(moment.unix(dueDate).day() % 6 === 0).to.not.true;
        });
    });
});
